To do:
--------------------------------------------------------------------------------

About to make significant changes to the state functions.  They will be written
in an appropriately declarative style.  The goal is to have the following
possible rather than "(take/drop (lambda (p r) ...) (lambda (p r) ...))":

(transfer gold p->r)

or

(transfer (item ladder) r->p)

by implementing transfer so that it knows zero-sum operations, i.e. gold uses
"+" on player and "-" on room or vice versa, and item uses cons and remove or
(const '()) and append.  In this way, transfer handles any potential data type,
and new operations can be defined by giving the proper inverse operators and the
direction of transfer.  The current style of spelling out how to move x gold
by creating an entire new state by find the room and making a new room similar
to the old room ... etc ... is embarrassingly C-like.

--------------------------------------------------------------------------------

When the above is done, the below might have less motivation:

Implement some kind of functional update syntax for structures or make
custom fancy structures if that's not possible or maybe just use classes,
but the goal is to convert

(state (state-p s) <new-coord-expression> (state-l s))

to

(set-state-c s <new-coord-expression>)
